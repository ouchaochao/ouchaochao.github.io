<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on LeaveIt</title>
    <link>https://ouchaochao.github.io/tags/go/</link>
    <description>Recent content in go on LeaveIt</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 20 Aug 2019 22:07:19 +0800</lastBuildDate>
    
	<atom:link href="https://ouchaochao.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go3_8</title>
      <link>https://ouchaochao.github.io/post/go3_8/</link>
      <pubDate>Tue, 20 Aug 2019 22:07:19 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go自动化部署项目</title>
      <link>https://ouchaochao.github.io/post/developgo/</link>
      <pubDate>Sun, 18 Aug 2019 20:14:36 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/developgo/</guid>
      <description>趁着有点时间学了一下DevOps和云计算初识, 发现一个以前没想到过的点 &amp;ndash; 自动化部署项目.
这个项目是用Go写的, 大致的过程如下:
1. 在本地写完代码之后, git push到github上 2. github里的Webhooks会被触发, 进而会访问一个设定好的网站 3. 这个网站就是DeployServer, 它会从github里git pull你刚push的代码 4. 代码返回到服务器 5. DeployServer停掉旧版本的WebServer, 然后运行最新的Webserver代码 6. 完成更新, 浏览器打开WebServer的网址就能访问最新的网页  下面是Webhooks的示意图:
下面是DeployServer的sh文件写法, 仅供参考:</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站3_7</title>
      <link>https://ouchaochao.github.io/post/go3_7/</link>
      <pubDate>Fri, 09 Aug 2019 09:21:36 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_7/</guid>
      <description>api数据库层设计 数据库设计: 用户    TABLE users postscript     id UNSIGNED INT
PRIMARY KEY
AUTO_INCREMENT 用户不可见
主键
自动增量更新   login_name VARCHAR(64)
UNIQUE KEY -
用户名不能重复   pwd TEXT -    数据库设计: 视频资源    TABLE video_info postscript     id VARCHAR(64)
PRIMARY KEY
NOT NULL 资源多,要长
主键
不为空   author_id UNSIGNED INT 上传视频的用户id
起到外键作用, 但是是在代码逻辑中处理   name TEXT -   display_ctime TEXT 展示给用户看   create_time DATETIME 用户理解会有困难, 所以创建display_ctime    数据库设计: 评论    TABLE comments postscript     id VARCHAR(64)</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站3_6</title>
      <link>https://ouchaochao.github.io/post/go3_6/</link>
      <pubDate>Thu, 08 Aug 2019 09:04:33 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_6/</guid>
      <description>api之http handler层 总览: api │ handlers.go │ main.go │ response.go │ ├─dbops │ api.go │ └─defs apidef.go errs.go  流程:
handler-&amp;gt;validation{1.request, 2.user}-&amp;gt;business logic-&amp;gt;response 1. data model. 2. error handing.
handler.go会调用dbops, 拿到它想要的东西, 然后做进一步处理, 处理包括消息/信息的定义, 然后将它们一起组装成response, 最后调取response.go, response返回结果到handler.go, 最后输出.
handlers.go package main import ( &amp;quot;github.com/julienschmidt/httprouter&amp;quot; &amp;quot;io&amp;quot; &amp;quot;net/http&amp;quot; ) func CreateUser(w http.ResponseWriter, r *http.Request, p httprouter.Params) { io.WriteString(w, &amp;quot;Create User Handler&amp;quot;) } func Login(w http.ResponseWriter, r *http.Request, p httprouter.Params) { uname := p.</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频3_3至3_5</title>
      <link>https://ouchaochao.github.io/post/go3_3to3_5/</link>
      <pubDate>Wed, 07 Aug 2019 09:41:54 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_3to3_5/</guid>
      <description>API实现之详细设计 在项目开始之前，首先把GOPATH的路径明确好，输入：
go env 可以得到： ··· GOPATH=&amp;quot;/Users/ouchaochao/go&amp;quot; ···  在这个路径下，新建文件夹： /Users/ouchaochao/go/src/ouchaochao.cn/video/api
api项目结构如下 api ├── auth.go ├── dbops # 与数据库交互部分 │ ├── api.go │ ├── api_test.go │ ├── conn.go │ └── internal.go ├── defs # 配置、定义等 │ ├── apidef.go │ └── errs.go ├── handlers.go # 逻辑处理的放在这 ├── main.go # 放一些简单的定义性的东西 ├── response.go ├── session │ └── ops.go └── utils └── uuid.go  在编辑.go文件之前，先把依赖装好，如：
go get github.com/julienschmidt/httprouter  编辑main.go package main import ( &amp;quot;github.</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站3_2</title>
      <link>https://ouchaochao.github.io/post/go3_2/</link>
      <pubDate>Tue, 06 Aug 2019 09:43:11 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_2/</guid>
      <description>API 设计与架构 后端服务 API  REST(Representational Status Transfer) API REST是一种设计风格，不是任何架构标准 当今RESTful API通常使用HTTP作为通信协议，JSON作为数据格式  特点
 统一接口（Uniform Interface）&amp;lt;接口要统一风格&amp;gt;
 无状态（Stateless）&amp;lt;我什么时候调用这个API，这个API必须返回是我想要的东西；幂等的&amp;gt;
幂等的含义： 在编程中一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。 幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。  可缓存（Cacheable）&amp;lt;常用的/读远大于写的数据放在缓存&amp;gt;
 分层（Layered System）&amp;lt;将一个API的service分层很多层，分成很多个服务&amp;gt;
 CS模式（Client-server Atchitecture）
  API设计原则  以URL（统一资源定位符）风格设计API
 通过不同的method（get、post、put、delete）来区分对资源的crud
 返回码（Status Code）符合HTTP资源描述的规定
  API设计：用户  创建（注册）用户：URL：/user，Method：post，SC：201/400/500
201：(已创建)请求成功并且服务器创建了新的资源。  用户登录：URL：/user/:username，Method：post， SC：200/400/500
 获取用户基本信息：URL：/user/:username，Method：get，SC：200/400/401/403/500
为什么多加了401和403： 对用户验证的时候，由于验证不通过而返回的错误码 401：并没有验证 403：通过验证，但是不具备操作某一项资源的权限  用户注销：URL：/user/:username，Method：delete， SC：204/400/401/403/500
204：表示请求执行成功，但是没有数据，浏览器不用刷新页面.也不用导向新的页面。 用户注销后，我们不用返回任何东西，但是要表示确实注销成功了   延伸阅读： HTTP的状态码有很多种,主要有1xx（临时响应）、2xx（成功）、3xx（已重定向）、4xx（请求错误）以及5xx（服务器错误）五个大类，每个大类还对应一些具体的分类。
百度百科状态码</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站3_1</title>
      <link>https://ouchaochao.github.io/post/go3_1/</link>
      <pubDate>Mon, 05 Aug 2019 09:36:59 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go3_1/</guid>
      <description> 流媒体网站整体介绍与架构梳理 为什么选择做视频网站  GO是一门网络编程语言 视频网站包含GO在实战项目中的绝大部分技能要点 优良的native http库以及模板引擎（无需任何第三方框架）  总体架构 什么是前后端解耦  前后端解耦是时下流行的web网站架构 前端页面和服务通过普通的web引擎渲染 后端数据通过渲染后的页面脚本调用后处理和呈现  前后端解耦的优势  解放生产力，提高合作效率 松耦合的架构更灵活，部署更方便，更符合微服务的设计的特征 性能的提升，提升可靠性  前后端解耦的劣势  工作量大 前后端分离带来的团队成本以及学习成本 系统复杂度加大  </description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站2_3</title>
      <link>https://ouchaochao.github.io/post/go2_3/</link>
      <pubDate>Sun, 04 Aug 2019 09:36:25 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go2_3/</guid>
      <description> benchmark的写法  benchmark函数一般以Benchmark开头 benchmark的case一般会跑b.N次，而且每次执行都会如此 在执行过程中go会根据实际case的执行时间是否稳定来决定b.N的次数，最后达到稳态  下面举栗子：（在main_test.go中加入以下代码）
package main import ( &amp;quot;testing&amp;quot; ) func BenchmarkAll(b *testing.B){ for n := 0; n &amp;lt; b.N; n++{ Print1to20() } }  命令行输入：
go test -bench=.  注意：
千万不要测试非稳态的代码，如：
func aaa(n int)int{ for n &amp;gt; 0{ n-- } return n } func BenchmarkAll(b *testing.B){ for n := 0; n &amp;lt; b.N; n++{ aaa(n) } } // 运行不会停  </description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站2_2</title>
      <link>https://ouchaochao.github.io/post/go2_2/</link>
      <pubDate>Sat, 03 Aug 2019 09:35:52 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go2_2/</guid>
      <description>golang项目中test的写法 main_test.go文件
package main import ( &amp;quot;testing&amp;quot; &amp;quot;fmt&amp;quot; ) func TestPrint(t *testing.T){ res := Print1to20() fmt.Println(&amp;quot;testing&amp;quot;) if res != 210{ t.Errorf(&amp;quot;Result Worng!&amp;quot;) } }  Test注意要点:
 每个test文件必须import一个testing test文件下的每一个test case均须以Test开头并且符合TestXxx形式，否则go test会直接跳过测试不执行 test case的入参为t *testing.T或者b *testing.B t.Errorf为打印错误信息，并且当前test case会被跳过 t.SkipNow()为跳过当前test，并且直接按PASS处理继续下一个test，例子如下：
package main import ( &amp;quot;testing&amp;quot; &amp;quot;fmt&amp;quot; ) func TestPrint(t *testing.T){ t.SkipNow() res := Print1to20() fmt.Println(&amp;quot;testing&amp;quot;) if res != 210{ t.Errorf(&amp;quot;Result Worng!&amp;quot;) } }  Go的test不会保证多个TestXxx是顺序执行，但是通常会顺序执行
 使用t.Run来执行subtest可以做到控制test输出已经test的顺序，例子如下：
package main import ( &amp;quot;testing&amp;quot; &amp;quot;fmt&amp;quot; ) func TestPrint(t *testing.</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站2_1</title>
      <link>https://ouchaochao.github.io/post/go2_1/</link>
      <pubDate>Fri, 02 Aug 2019 09:34:41 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go2_1/</guid>
      <description>一个例子了解GO Go有如下命令：
Go is a tool for managing Go source code. Usage: go &amp;lt;command&amp;gt; [arguments] The commands are: bug start a bug report build compile packages and dependencies clean remove object files and cached files doc show documentation for package or symbol env print Go environment information fix update packages to use new APIs fmt gofmt (reformat) package sources generate generate Go files by processing source get download and install packages and dependencies install compile and install packages and dependencies list list packages or modules mod module maintenance run compile and run Go program test test packages tool run specified go tool version print Go version vet report likely mistakes in packages  下面介绍一下常用的命令：</description>
    </item>
    
    <item>
      <title>Go语言实战流媒体视频网站1</title>
      <link>https://ouchaochao.github.io/post/go1/</link>
      <pubDate>Thu, 01 Aug 2019 09:34:41 +0800</pubDate>
      
      <guid>https://ouchaochao.github.io/post/go1/</guid>
      <description>本系列将记录在慕课学习Go做流媒体视频网站的过程。 第一节就用一张图来概括了：</description>
    </item>
    
  </channel>
</rss>